<?php
session_start();
require_once('Models/UserData.php');
require_once "Models/Database.php";
class UserDataSet
{
    protected $email;
    protected $password;
    protected $connectedDbs;
    protected $username;
    protected $firstName;
    protected $lastName;
    protected $userLat;
    protected $userLng;

    public function __construct()
    {
        $newDbs = new Database();
        $this->connectedDbs = $newDbs->getTheDbs();
    }
//user authentication at the login page, values are passed by the form, email and password
    public function userLogin($email, $password)
    {
        //trim used to remove any spaces that are present before or after the string values
        $this->email = trim($email);
        $this->password = trim($password);
        //sql query, to select the users who match the email
        $checkEmail = $this->connectedDbs->prepare("SELECT * FROM users WHERE email = ? ");
        $checkEmail->execute([$this->email]);
        //store the matched user row as an array
        $row = $checkEmail->fetch(PDO::FETCH_ASSOC);
        //echo "<h1>".$row['user_email']."</h1>";
        //echo "<h1>".$row['user_password']."</h1>";
        if($row !=null && $row['email'] == $this->email)
        {
            //echo '<h1>Congratulations email is registered on the database!</h1>';
            $checkHashPass = password_verify($this->password, $row['password']);
            //the condition checks for hash passwords OR password generated by MOCKAROO
            //if($checkHashPass || $row['password'] == $this->password)
            //check if the password is correct or not
            if($checkHashPass)
            {
                //echo 'Password matched the DATABASE!';
                //start the session for the user who logged in successfully, here I store user id and email as variables, to be accessible to all pages
                $_SESSION = [
                    'user_id' => $row['id'],
                    'email' => $row['email']
                ];
                //echo '<h1><br> USER ID:'.$row['id']."  User session is created<br></h1>";
                //show profile data on the header of the user logged in
                header('Location: profile.php');
                //equivalent to exit(), terminates the current script
                //die();
            }
            else
            {
                //echo '<br>Password not matched!<br>';
                return 1;
            }
        }
        else
        {
            //echo '<br>Email is not registered, you need to SIGN UP first!<br>';
            return 2;
        }
    }
    //function to find a user by giving it an ID, gets the match from database
    public function findUserById($id){
        try{
            //echo '<br>finding user by id in sql<br>'.'<br>'.$id;
            //query to find user via its unique id, question mark (parameterized query) is used to prevent SQL INJECTION
            $find_user = $this->connectedDbs->prepare("SELECT * FROM `users` WHERE id = ?");
            //executes the query, gives the id the question mark
            $find_user->execute([$id]);
            //stores the results in variable, in array form
            $userFind = $find_user->fetch(PDO::FETCH_ASSOC);
            //rowCount function returns the number of rows fetched by the SQL query
            $rowCount = $find_user->rowCount();
            //making sure that only one row is matched as ID is unique, and returning that user
            //triple equal (===) is used here to make sure that it has same information and same data type, for strict comparison
            if($rowCount === 1){
                return $userFind;
            }
            else{
                echo '<br>user not found in sql, error in find user by id method<br>';
                return false;
            }
        }
            //catches errors caused by the PDO
        catch (PDOException $e) {
            echo "Error in PDO in find user by id function";
            die($e->getMessage());

        }
    }

    //returns all users other the one who is logged in
    public function allUsers($id){
        try{
            //query to get all the users, but not the one with the ID supplied
            $getUsers = $this->connectedDbs->prepare("SELECT * FROM `users` WHERE id != ?");
            $getUsers->execute([$id]);
            //var_dump($get_users->fetchAll());
            if($getUsers->rowCount() > 0){
                //fetches the rows and returns them as an object
                //return $getUsers->fetchAll(PDO::FETCH_OBJ);
                $dataSet = [];
                while ($row = $getUsers->fetch()) {
                    $dataSet[] = new UserData($row);
                }
                return $dataSet;
            }
            else{
                return false;
            }
        }
        catch (PDOException $e) {
            die($e->getMessage());
        }
    }
    public function signUpUser($newFirstName, $newLastName, $newUsername, $newEmail, $newPassword, $userImage, $newLat, $newLng)
    {
        //echo "<br/>just in sign up user function</br>" . $newUsername . " , " . $newEmail . " , " . $newPassword . " , ". $userImage."       <<<<";
        //gets the values from the sign up form, then stores them in database
        try{
            //remove any spaces from front and back
            $this->firstName = trim($newFirstName);
            $this->lastName = trim($newLastName);
            $this->username = trim($newUsername);
            $this->email = trim($newEmail);
            $this->password = trim($newPassword);
            $this->userLat = $newLat;
            $this->userLng=$newLng;
            //echo("<br/>Trimmed the variables now!");
            //making sure that none of the variables are empty, before storing in database
            if(!empty($this->username) && !empty($this->email) && !empty($this->password)){
                //echo "<br/>Inside the first IF statement";
                //making sure that the email address is valid by using filter_var function, filter validate email, validates whether the value is a valid e-mail address
                if (filter_var($this->email, FILTER_VALIDATE_EMAIL)) {
                    $check_email = $this->connectedDbs->prepare("SELECT * FROM `users` WHERE email = ?");
                    $check_email->execute([$this->email]);
                    //echo "<br/>Checking email...";
                    //making sure that the email has not been registered before
                    if($check_email->rowCount() > 0){
                        echo '<div class="alert alert-danger text-center"><strong class="mx-2">Account with this email is already registered!</strong></div>';
                    }
                    else{
                        //echo "</br>Picture used in sign up: ".$userImage;
                        //if no image is uploaded than a RANDOM image stored in images folder will be given to the new user
                        if($userImage==null) {
                            //echo "</br>No image uploaded, so a random one is generated</br>";
                            $userImage = rand(1, 5);
                            $userImage = "images/profilePictures/".$userImage.".png";
                        }
                        else
                        {
                            //echo "</br>Image is being uploaded...";
                            //full image name stored on the database
                            $userImage = "images/profilePictures/".$userImage;
                        }
                        //encrypting the password, using php default password hashing algorithm
                        $hashPassword = password_hash($this->password, PASSWORD_DEFAULT);
                        $sql = "INSERT INTO `users` (firstName, lastName, username, email, password, userImage, lat, lng) VALUES(:first_Name, :last_Name, :username, :user_email, :user_pass, :user_image, :user_lat, :user_lng)";
                        $statement = $this->connectedDbs->prepare($sql);
                        //binding the variables to the parameters using bindValue(), it protects from sql injections
                        $statement->bindValue(':first_Name',$this->firstName, PDO::PARAM_STR);
                        $statement->bindValue(':last_Name',$this->lastName, PDO::PARAM_STR);
                        $statement->bindValue(':username',$this->username, PDO::PARAM_STR);
                        $statement->bindValue(':user_email',$this->email, PDO::PARAM_STR);
                        $statement->bindValue(':user_pass', $hashPassword, PDO::PARAM_STR);
                        $statement->bindValue(':user_image',$userImage, PDO::PARAM_STR);
                        $statement->bindValue(':user_lat',$this->userLat, PDO::PARAM_STR);
                        $statement->bindValue(':user_lng',$this->userLng, PDO::PARAM_STR);
                        $statement->execute();
                        echo "<br/><h1>Account Registered!</h1></br>";
                        echo "<h1><a href='index.php' class='btn-primary'> LOGIN NOW</a></h1>";
                    }
                }
                else{
                    echo "<br/>Email is invalid !";

                }
            }
            else{
                echo "<br/> Fields incomplete! / EMPTY INPUT";
            }
        }
        catch (PDOException $e) {
            die($e->getMessage());
        }
    }
    //Uploads the image to the images folder and calls the signup user function
    public function profileCreator()
    {
        //echo "</br>".$_POST['username'];
        //echo "</br>".$_POST['email'];
        //echo "</br>".$_POST['password'];
        //echo "</br><prev>", print_r($_FILES['fileToUpload']['name']), "</prev>";
        //$_FILES is the HTTP file upload variable, uploads files via POST method and stores file information
        $profileImageName = $_FILES['fileToUpload']['name'];
        $target = 'images/profilePictures/' . $profileImageName;
        move_uploaded_file($_FILES['fileToUpload']['tmp_name'], $target);
        $this->signUpUser($_POST['fName'],$_POST['lName'],$_POST['username'],$_POST['email'],$_POST['password'], $profileImageName, '51.507351', '-0.127758');
    }
    //search for users where the user information matches the search term
    public function searchUsers($receiveSearch)
    {
        //echo "</br>value received into User class: ".$receiveSearch;
        if($receiveSearch!="") {
            //searching for match, with  %----%, will fetch all data containing %text%
            $sqlQuery = "SELECT * FROM users WHERE firstName LIKE '%$receiveSearch%'
                       OR lastName LIKE '%$receiveSearch%'
                       OR username LIKE '%$receiveSearch%'
                       OR email LIKE '%$receiveSearch%'
                       OR lat LIKE '%$receiveSearch%'
                       OR lng LIKE '%$receiveSearch%'";
            //echo "<br/>".$sqlQuery;
            $searchResult = $this->connectedDbs->prepare($sqlQuery);
            $searchResult->execute();
            //echo "<br/>sql query executed:<br/>";
            //echo '<pre>' , var_dump($searchResult) , '</pre>';
            //returns the sql query after executing it with the search value provided
            //return $searchResult;
            $sendResults = $searchResult->fetchAll(PDO::FETCH_ASSOC);
            if ($searchResult->rowCount() > 0) {
                return $sendResults;
            } else {
                echo "<h2 class='warning'>No match found, please check input and try again!</h2>";
            }
        }
        else
        {
            echo "<h2 class='warning'>You did not type anything in the search bar!</h2>";
        }
    }
}